
<div class="container" style="margin-bottom:30px">
    
    <script>

        var vcap = @Html.Raw(ViewBag.Json);

        var services = ["filesystem-1.0", "harbor-1.0", "memcached-1.4", "mongodb-2.4", "mysql-5.5", "postgresql-9.1", "rabbitmq3-3.1", "mssql2014", "redis-2.8"];
        $(function () {
            //Populate ALS services
            $(".collapsediv").hide();
            $.each(services, function( i, v ) {
                var escaped_id = v.replace( /(:|\.|\[|\]|,)/g, "\\$1" );
                if(vcap[v]){
                    $("#"+escaped_id+"_div").find("div.off").hide();
                    $("#buttons").append("<button id='"+escaped_id+"' class='btn btn-success togglebtn' type='button'>"+v+"</button>");
                    $("#"+escaped_id+"_div").find("div.on").append("<pre>"+JSON.stringify((vcap[v])[0],null, "\t")+"</pre>");

                }
                else{
                    $("#"+escaped_id+"_div").find("div.on").hide();
                    $("#buttons").append("<button id='"+escaped_id+"' class='btn btn-default togglebtn' type='button'>"+v+"</button>");

                }
            });
            //Populate user-provided services
            if(vcap['user-provided'] != null) {
                var user_provided = vcap['user_provided'];
                $("#userprovided-services-howto_div").hide();

                user_provided.forEach( function(v,i) {
                    upName = v['name'];
                    $("#userprovided-service-buttons").append("<button id='"+upName+"' class='btn btn-success togglebtn udbtn' type='button'>"+upName+"</button>");
                    $("#userprovided_divs").append("<div class='collapsediv well on' id='"+upName+"_div'></div>");
                    $("#"+upName+"_div").hide();
                    $("#"+upName+"_div").append("<pre>"+JSON.stringify(v,null, "\t")+"</pre>");

                });
            }

            $('.togglebtn').bind('click', function () {
                $(".collapsediv").hide();
                var target_id = this.id;
                $("#" + target_id + "_div").slideDown();

            });
        });
    </script>
    <script type="text/javascript">
        SyntaxHighlighter.all();
    </script>

    <h2>ALS Services<span style="padding-left:10px;font-size:.6em">(these are built into Cloud Foundry and enabled by your admin)</span></h2>
    <div id="buttons">

    </div>
    <div class="collapsediv" id="filesystem-1.0_div">
        <div class="well on">
            <div class='alert alert-success' role='alert'>This service is enabled and bound to your app.  Use the connection info and code snippets below to use it in your app.</div>
        </div>
        <div class="well off">
            <div class="alert alert-warning" role="alert">This service was not provisioned during the microcloud creation process.  Create this service using the <a href="http://docs.hpcloud.com/#devplatform/1.3/helion/CLI/cfmgmt_growcluster_addservice.html">cf-mgmt tool</a>.</div>
            <p>To create an instance of the filesystem service, execute the  commands below in the directory containing the your app:</p>
            <pre>helion
                create-service filesystem dotnet-starter-filesystem dotnet-starter
            </pre>
            <p>You can also uncomment the following in the manifest.yml and push the app again.</p>
            <pre>${name}-filesystem:<br />
                &nbsp;&nbsp;type: filesystem
            </pre>
            <p>After the steps above, deploy the app and refresh this page. </p>
            <pre>helion
                push --stack win2012r2
            </pre>
        </div>
    </div>
    <div class="collapsediv" id="harbor-1.0_div">
        <div class="well on">
            <div class='alert alert-success' role='alert'>This service is enabled and bound to your app.  Use the connection info and code snippets below to use it in your app.</div>
        </div>
        <div class="well off">
            <div class="alert alert-warning" role="alert">This service was not provisioned during the microcloud creation process.  Create this service using the <a href="http://docs.hpcloud.com/#devplatform/1.3/helion/CLI/cfmgmt_growcluster_addservice.html">cf-mgmt tool</a>.</div>
            <p>To create an instance of the harbor port service, execute the  commands below in the directory containing the your app:</p>
            <pre>helion
                create-service harbor dotnet-starter-harbor dotnet-starter
            </pre>
            <p>You can also uncomment the following in the manifest.yml and push the app again.</p>
            <pre>
                ${name}-harbor:<br />
                &nbsp;&nbsp;type: harbor
            </pre>
            <p>After the steps above, deploy the app and refresh this page. </p>
            <pre>helion
                push --stack win2012r2
            </pre>
        </div>
    </div>
    <div class="collapsediv" id="memcached-1.4_div">
        <div class="well on">
            <div class='alert alert-success' role='alert'>This service is enabled and bound to your app.  Use the connection info and code snippets below to use it in your app.</div>
        </div>
        <div class="well off">
            <div class="alert alert-warning" role="alert">This service was not provisioned during the microcloud creation process.  Create this service using the <a href="http://docs.hpcloud.com/#devplatform/1.3/helion/CLI/cfmgmt_growcluster_addservice.html">cf-mgmt tool</a>.</div>
            <p>To create an instance of the memecached service, execute the  commands below in the directory containing the your app:</p>
            <pre>helion
                create-service memcached dotnet-starter-memcached dotnet-starter
            </pre>
            <p>You can also uncomment the following in the manifest.yml and push the app again.</p>
            <pre>
                ${name}-memcached:<br />
                &nbsp;&nbsp;type: memcached
            </pre>
            <p>After the steps above, deploy the app and refresh this page. </p>
            <pre>helion
                push --stack win2012r2
            </pre>
        </div>
    </div>
    <div class="collapsediv" id="mongodb-2.4_div">
        <div class="well on">
            <div class='alert alert-success' role='alert'>This service is enabled and bound to your app.  Use the connection info and code snippets below to use it in your app.</div>
            <script type="syntaxhighlighter" class="brush: csharp">
                <![CDATA[
                //add references
                // using Newtonsoft.Json.Linq
                // using MongoDB.Driver
                // using MongoDB.Bson
                // using System.Threading.Tasks

                try
                {

                string vcapMongo = Environment.GetEnvironmentVariable("VCAP_SERVICES");

                JObject servicesMongo = Newtonsoft.Json.Linq.JObject.Parse(vcapMongo);
                string uriMongo = servicesMongo["mongodb-2.4"].First["credentials"]["uri"].ToString();
                var client = new MongoClient(uriMongo);
                var dbName = servicesMongo["mongodb-2.4"].First["credentials"]["db"].ToString();
                var database = client.GetDatabase(dbName);

                var collection = database.GetCollection
                <bsondocument>
                    ("mycollection");

                    var document = new BsonDocument
                    {
                    { "name", "MySampleDocument" },
                    { "type", "Database" },
                    { "count", 1 },
                    { "info", new BsonDocument
                    {
                    { "x", 1 },
                    { "y", 1 }
                    }}
                    };

                    Task.WaitAll(collection.InsertOneAsync(document));

                    Task<long>
                        count = collection.CountAsync(new BsonDocument());
                        count.Wait();


                        /*If using async method you just need to do this:
                        * var count = await collection.CountAsync(new BsonDocument());
                        Console.WriteLine(count);*/

                        Task<bsondocument>
                            fetchDocument = collection.Find(new BsonDocument()).FirstOrDefaultAsync();
                            fetchDocument.Wait();

                            catch (Exception e)
                            {
                            //Handle exception
                            }
                            }


                            ]]>
            </script>
         </div>
        <div class="well off">
            <div class="alert alert-warning" role="alert">This service was not provisioned during the microcloud creation process.  Create this service using the <a href="http://docs.hpcloud.com/#devplatform/1.3/helion/CLI/cfmgmt_growcluster_addservice.html">cf-mgmt tool</a>.</div>
            <p>To create an instance of the mongo service, execute the  commands below in the directory containing the your app:</p>
            <pre>helion
                create-service mongodb dotnet-starter-mongodb dotnet-starter
            </pre>
            <p>You can also uncomment the following in the manifest.yml and push the app again.</p>
            <pre>
                ${name}-mongodb:<br />
                &nbsp;&nbsp;type: mongodb
            </pre>
            <p>After the steps above, deploy the app and refresh this page. </p>
            <pre>helion
                push --stack win2012r2
            </pre>
        </div>
    </div>
    <div class="collapsediv" id="mysql-5.5_div">
        <div class="well on">
            <div class='alert alert-success' role='alert'>This service is enabled and bound to your app.  Use the connection info and code snippets below to use it in your app.</div>
            <script type="syntaxhighlighter" class="brush: csharp">
                <![CDATA[
                try
                {

                    string vcapMySql = Environment.GetEnvironmentVariable("VCAP_SERVICES");

                    JObject servicesMySql = Newtonsoft.Json.Linq.JObject.Parse(vcapMySql);
                    string server = servicesMySql["mysql-5.5"].First["credentials"]["host"].ToString();
                    string port = servicesMySql["mysql-5.5"].First["credentials"]["port"].ToString();
                    string user = servicesMySql["mysql-5.5"].First["credentials"]["user"].ToString();
                    string password = servicesMySql["mysql-5.5"].First["credentials"]["password"].ToString();
                    string db = servicesMySql["mysql-5.5"].First["credentials"]["name"].ToString();

                    string connectionString = String.Format("Server={0};Port={1};Database={2};Uid={3};Pwd={4}", server, port, db, user, password);

                    MySqlConnection connection = new MySqlConnection(connectionString);
                    connection.Open();

                }
                catch (Exception e)
                {
                    //Handle connection exception
                }

                ]]>
            </script>
        </div>
        <div class="well off">
            <div class="alert alert-success" role="alert">This service was created during the microcloud creation process. The steps below will make it available for your app.</div>
            <p>To create an instance of the mysql service, execute the  commands below in the directory containing the your app:</p>
            <pre>helion
                create-service mysql dotnet-starter-mysql dotnet-starter
            </pre>
            <p>You can also uncomment the following in the manifest.yml and push the app again.</p>
            <pre>
                ${name}-mysql:<br />
                &nbsp;&nbsp;type: mysql
            </pre>
            <p>After the steps above, deploy the app and refresh this page. </p>
            <pre>helion
                push --stack win2012r2
            </pre>
        </div>
    </div>
    <div class="collapsediv" id="postgresql-9.1_div">
        <div class="well on">
            <div class='alert alert-success' role='alert'>This service is enabled and bound to your app.  Use the connection info and code snippets below to use it in your app.</div>
        </div>
        <div class="well off">
            <div class="alert alert-warning" role="alert">This service was not provisioned during the microcloud creation process.  Create this service using the <a href="http://docs.hpcloud.com/#devplatform/1.3/helion/CLI/cfmgmt_growcluster_addservice.html">cf-mgmt tool</a>.</div>
            <p>To create an instance of the postgres service, execute the  commands below in the directory containing the your app:</p>
            <pre>helion
                create-service postgresql dotnet-starter-postgresql dotnet-starter
            </pre>
            <p>You can also uncomment the following in the manifest.yml and push the app again.</p>
            <pre>
                ${name}-postgresql:<br />
                &nbsp;&nbsp;type: postgresql
            </pre>
            <p>After the steps above, deploy the app and refresh this page. </p>
            <pre>helion
                push --stack win2012r2
            </pre>
        </div>
    </div>
    <div class="collapsediv" id="rabbitmq3-3.1_div">
        <div class="well on">
            <div class='alert alert-success' role='alert'>This service is enabled and bound to your app.  Use the connection info and code snippets below to use it in your app.</div>

            <script type="syntaxhighlighter" class="brush: csharp">
                <![CDATA[

                //add references
                // using Newtonsoft.Json.Linq
                // using RabbitMQ.Client
                //using RabbitMQ.Client.Events


                try
                {

                string vcapRabbit = Environment.GetEnvironmentVariable("VCAP_SERVICES");

                JObject servicesRabbit = Newtonsoft.Json.Linq.JObject.Parse(vcapRabbit);
                string server = servicesRabbit["rabbitmq-2.8"].First["credentials"]["host"].ToString();
                string port = servicesRabbit["rabbitmq-2.8"].First["credentials"]["port"].ToString();
                string user = servicesRabbit["rabbitmq-2.8"].First["credentials"]["user"].ToString();
                string password = servicesRabbit["rabbitmq-2.8"].First["credentials"]["password"].ToString();
                string vhost = servicesRabbit["rabbitmq-2.8"].First["credentials"]["vhost"].ToString();

                var factory = new ConnectionFactory {
                    HostName = server ,
                    VirtualHost = vhost,
                    Port = int.Parse(port),
                    UserName = user,
                    Password = password};

                factory.ToString();

                var connection = factory.CreateConnection();
                var channel = connection.CreateModel();

                channel.QueueDeclare(queue: "hello",
                durable: false,
                exclusive: false,
                autoDelete: false,
                arguments: null);


                }
                catch (Exception e)
                {
                e.ToString();
                }
                }



                ]]>
            </script>
        </div>
        <div class="well off">
            <div class="alert alert-warning" role="alert">This service was not provisioned during the microcloud creation process.  Create this service using the <a href="http://docs.hpcloud.com/#devplatform/1.3/helion/CLI/cfmgmt_growcluster_addservice.html">cf-mgmt tool</a>.</div>
            <p>To create an instance of the rabbit service, execute the  commands below in the directory containing the your app:</p>
            <pre>helion
                create-service rabbitmq3 dotnet-starter-rabbitmq3 dotnet-starter
            </pre>
            <p>You can also uncomment the following in the manifest.yml and push the app again.</p>
            <pre>
                ${name}-rabbitmq3:<br />
                &nbsp;&nbsp;type: rabbitmq3
            </pre>
            <p>After the steps above, deploy the app and refresh this page. </p>
            <pre>helion
                push --stack win2012r2
            </pre>
        </div>
    </div>
    <div class="collapsediv" id="mssql2014_div">
        <div class="well on">
            <div class='alert alert-success' role='alert'>This service is enabled and bound to your app.  Use the connection info and code snippets below to use it in your app.</div>
            <script type="syntaxhighlighter" class="brush: xml">
                <![CDATA[
                <!--Replace web.config connectionstring with CF variables as shown below-->
                <connectionstrings>
                    <!--<add name="DefaultConnection" providername="System.Data.SqlClient" connectionstring="Data Source=(LocalDb)\v11.0;Initial Catalog=aspnet-dotnet_starter_app-20150902190110;Integrated Security=SSPI;AttachDBFilename=|DataDirectory|\aspnet-dotnet_starter_app-20150902190110.mdf" /> -->
                    <add name="DefaultConnection" connectionstring="Server={dotnet-sqlserver14-db#hostname},{dotnet-sqlserver14-db#port};Database={dotnet-sqlserver14-db#name};User Id={dotnet-sqlserver14-db#username};Password={dotnet-sqlserver14-db#password};MultipleActiveResultSets=true;" providername="System.Data.SqlClient" />
                </connectionstrings>

                ]]>
            </script>
        </div>
        <div class="well off">
            <div class="alert alert-success" role="alert">This service was created during the microcloud creation process. The steps below will make it available for your app.</div>
            <p>To create an instance of the sql server service, execute the  commands below in the directory containing the your app:</p>
            <pre>helion
                create-service mssql2014 dotnet-starter-mssql2014 dotnet-starter
            </pre>
            <p>You can also uncomment the following in the manifest.yml and push the app again.</p>
            <pre>
                ${name}-mssql2014:<br />
                &nbsp;&nbsp;type: mssql2014
            </pre>
            <p>After the steps above, deploy the app and refresh this page. </p>
            <pre>helion
                push --stack win2012r2
            </pre>
        </div>
    </div>
    <div class="collapsediv" id="redis-2.8_div">
        <div class="well on">
            <div class='alert alert-success' role='alert'>This service is enabled and bound to your app.  Use the connection info and code snippets below to use it in your app.</div>

            <script type="syntaxhighlighter" class="brush: csharp">
                <![CDATA[

                //add using statements
                //using Newtonsoft.Json.Linq
                //using StackExchange.Redis

                try
                {
                string vcap = Environment.GetEnvironmentVariable("VCAP_SERVICES");

                JObject services = Newtonsoft.Json.Linq.JObject.Parse(vcap);
                string host = services["redis-2.8"].First["credentials"]["host"].ToString();
                string port = services["redis-2.8"].First["credentials"]["port"].ToString();
                string password = services["redis-2.8"].First["credentials"]["password"].ToString();
                string conn = String.Format("{0}:{1},password={2}", host, port, password);

                ConnectionMultiplexer redis = ConnectionMultiplexer.Connect(conn);
                IDatabase db = redis.GetDatabase();
                string input = "This is an example on how to use redis in .NET";
                db.StringSet("mykey", input);

                string output = db.StringGet("mykey");


                }
                catch (Exception e)
                {
                //Handle exception
                }

                }

                ]]>
            </script>
        </div>
        <div class="well off">
            <div class="alert alert-warning" role="alert">This service was not provisioned during the microcloud creation process.  Create this service using the <a href="http://docs.hpcloud.com/#devplatform/1.3/helion/CLI/cfmgmt_growcluster_addservice.html">cf-mgmt tool</a>.</div>
            <p>To create an instance of the redis service, execute the  commands below in the directory containing the your app:</p>
            <pre>helion
                create-service redis dotnet-starter-redis dotnet-starter
            </pre>
            <p>You can also uncomment the following in the manifest.yml and push the app again.</p>
            <pre>
                ${name}-redis:<br />
                &nbsp;&nbsp;type: redis
            </pre>
            <p>After the steps above, deploy the app and refresh this page. </p>
            <pre>helion
                push --stack win2012r2
            </pre>
        </div>
    </div>
    <h2>User-Provided Services<span style="padding-left:10px;font-size:.6em">(these are externally provisioned and enabled)</span></h2>
    <div id="buttons">

    </div>
    <div id="found_userprovided_services">
        <div id="userprovided-service-buttons">

        </div>




            <div id='userprovided_divs'>
                <div id="userprovided-services-howto_div" class="well off">
                    <div class="alert alert-warning" role="alert">
                        No <a href="http://docs.hpcloud.com/devplatform/1.2/helion/user/services/1.2user-provided.html">User Provided Services</a> have been created and bound to this app. Create and bind to one by following the steps below. 
                    </div>
                    <pre>helion create-service user-provided [name of service]</pre>
                    <p>The helion CLI will prompt you to specify credential keys and values (note defaults of hostname, port, password):</p>
                    <pre>Which credentials to use for connections [hostname, port, password]:</pre>
                    <p>
                        You can override these defaults with your own credential keys, separate keys with commas, and the CLI will then prompt you for values of each credential key.<br />
                        When you've created your service, you need to bind it to specific applications
                    </p>
                    <pre>helion bind-service [service name] [application name]</pre>
                </div>


            </div>


    </div>

</div>
